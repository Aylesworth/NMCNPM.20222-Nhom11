/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mch.view;

import java.awt.Color;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Arrays;
import javax.swing.JOptionPane;
import mch.App;
import mch.controller.UserController;
import mch.dto.UserSignUpDto;
import mch.exception.InvalidValueException;
import mch.exception.ServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 *
 * @author Admin
 */
@Component
@Scope("prototype")
public class SignUpForm extends javax.swing.JPanel {

    /**
     * Creates new form SignUpPanel
     */
    public SignUpForm() {
        initComponents();
    }

    @Autowired
    private UserController userController;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtConfirmPassword = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        boxSex = new javax.swing.JComboBox<>();
        txtDob = new javax.swing.JTextField();
        btnSignUp = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        btnSignIn = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(new java.awt.Dimension(900, 600));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("ĐĂNG KÝ");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, -1, -1));

        jLabel2.setText("Email");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, -1, -1));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 90, 191, -1));

        jLabel3.setText("Mật khẩu");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, -1, -1));

        jLabel4.setText("Nhập lại mật khẩu");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 170, -1, -1));

        jLabel5.setText("Họ và tên");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 210, -1, -1));
        add(txtFullName, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 210, 191, -1));

        jLabel6.setText("Ngày sinh");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, -1, -1));
        add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 130, 191, -1));
        add(txtConfirmPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 170, 191, -1));

        jLabel7.setText("Giới tính");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, -1, -1));

        boxSex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ" }));
        add(boxSex, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 290, 191, -1));
        add(txtDob, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 250, 191, -1));

        btnSignUp.setText("Đăng ký");
        btnSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignUpActionPerformed(evt);
            }
        });
        add(btnSignUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 420, -1, -1));

        jLabel9.setText("Số điện thoại");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 330, -1, -1));
        add(txtPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, 191, -1));

        jLabel10.setText("Địa chỉ");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 370, -1, -1));
        add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 370, 191, -1));

        btnSignIn.setText("Quay lại đăng nhập");
        btnSignIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignInActionPerformed(evt);
            }
        });
        add(btnSignIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 420, -1, -1));

        btnClear.setText("Xóa tất cả");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 420, -1, -1));

        lblMessage.setForeground(new java.awt.Color(102, 102, 0));
        lblMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lblMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 470, 259, 24));
    }// </editor-fold>//GEN-END:initComponents

    private void btnSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignUpActionPerformed
        try {
            validateFields();

            UserSignUpDto dto = UserSignUpDto.builder()
                    .email(txtEmail.getText())
                    .password(String.valueOf(txtPassword.getPassword()))
                    .fullName(txtFullName.getText())
                    .dob(LocalDate.parse(txtDob.getText(), dateTimeFormatter))
                    .sex(boxSex.getSelectedItem().toString())
                    .phone(txtPhone.getText())
                    .address(txtAddress.getText()).build();

            userController.signUp(dto);

            JOptionPane.showMessageDialog(null, "Đăng ký thành công!");
            clear();
        } catch (InvalidValueException ex) {
            lblMessage.setText(ex.getMessage());
        } catch (ServiceException ex) {
            lblMessage.setText(ex.getMessage());
        }
    }//GEN-LAST:event_btnSignUpActionPerformed

    private void btnSignInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignInActionPerformed
        App.getApplicationContext().getBean(MainFrame.class).setSinglePanel(SignInForm.class);
    }//GEN-LAST:event_btnSignInActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    @Autowired
    private String emailPattern;
    @Autowired
    private DateTimeFormatter dateTimeFormatter;
    @Autowired
    private String phonePattern;
    @Autowired
    private Color errorBackground;

    private void validateFields() throws InvalidValueException {

        if (txtEmail.getText().equals("")) {
            txtEmail.setBackground(errorBackground);
            throw new InvalidValueException("Vui lòng nhập email!");
        }
        if (!txtEmail.getText().matches(emailPattern)) {
            txtEmail.setBackground(errorBackground);
            throw new InvalidValueException("Email không hợp lệ!");
        }
        txtEmail.setBackground(Color.white);

        if (String.valueOf(txtPassword.getPassword()).equals("")) {
            txtPassword.setBackground(errorBackground);
            throw new InvalidValueException("Vui lòng điền mật khẩu!");
        }
        if (String.valueOf(txtPassword.getPassword()).length() < 8) {
            txtPassword.setBackground(errorBackground);
            throw new InvalidValueException("Mật khẩu cần có ít nhất 8 ký tự!");
        }
        txtPassword.setBackground(Color.white);

        if (String.valueOf(txtConfirmPassword.getPassword()).equals("")) {
            txtConfirmPassword.setBackground(errorBackground);
            throw new InvalidValueException("Vui lòng nhập lại mật khẩu!");
        }
        if (!Arrays.equals(txtConfirmPassword.getPassword(), txtPassword.getPassword())) {
            txtConfirmPassword.setBackground(errorBackground);
            throw new InvalidValueException("Mật khẩu nhập lại không khớp!");
        }
        txtConfirmPassword.setBackground(Color.white);

        if (txtFullName.getText().equals("")) {
            txtFullName.setBackground(errorBackground);
            throw new InvalidValueException("Vui lòng điền họ tên!");
        }
        txtFullName.setBackground(Color.white);

        if (txtDob.getText().equals("")) {
            txtDob.setBackground(errorBackground);
            throw new InvalidValueException("Vui lòng nhập ngày sinh!");
        }
        try {
            LocalDate.parse(txtDob.getText(), dateTimeFormatter);
        } catch (DateTimeParseException e) {
            txtDob.setBackground(errorBackground);
            throw new InvalidValueException("Ngày sinh không hợp lệ!");
        }
        txtDob.setBackground(Color.white);

        if (txtPhone.getText().equals("")) {
            txtPhone.setBackground(errorBackground);
            throw new InvalidValueException("Vui lòng điền số điện thoại!");
        }
        if (!txtPhone.getText().matches(phonePattern)) {
            txtPhone.setBackground(errorBackground);
            throw new InvalidValueException("Số điện thoại không hợp lệ!");
        }
        txtPhone.setBackground(Color.white);

        if (txtAddress.getText().equals("")) {
            txtAddress.setBackground(errorBackground);
            throw new InvalidValueException("Vui lòng nhập địa chỉ!");
        }
        txtAddress.setBackground(Color.white);
    }

    private void clear() {
        txtEmail.setText("");
        txtEmail.setBackground(Color.white);
        txtPassword.setText("");
        txtPassword.setBackground(Color.white);
        txtConfirmPassword.setText("");
        txtConfirmPassword.setBackground(Color.white);
        txtFullName.setText("");
        txtFullName.setBackground(Color.white);
        txtDob.setText("");
        txtDob.setBackground(Color.white);
        boxSex.setSelectedIndex(0);
        txtPhone.setText("");
        txtPhone.setBackground(Color.white);
        txtAddress.setText("");
        txtAddress.setBackground(Color.white);
        lblMessage.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxSex;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSignIn;
    private javax.swing.JButton btnSignUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
